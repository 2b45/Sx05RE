diff U3 a/es-app/src/guis/GuiMenu.cpp b/es-app/src/guis/GuiMenu.cpp
--- a/es-app/src/guis/GuiMenu.cpp	Thu Jun 08 07:58:22 2017
+++ b/es-app/src/guis/GuiMenu.cpp	Thu Jun 08 16:55:16 2017
@@ -22,7 +22,7 @@
 	bool isFullUI = UIModeController::getInstance()->isUIModeFull();
 
 	if (isFullUI)
-		addEntry("SCRAPER", 0x777777FF, true, [this] { openScraperSettings(); });
+		addEntry("Sx05RE", 0x777777FF, true, [this] { openScraperSettings(); });
 
 	addEntry("SOUND SETTINGS", 0x777777FF, true, [this] { openSoundSettings(); });
 
@@ -48,36 +48,53 @@
 	setPosition((Renderer::getScreenWidth() - mSize.x()) / 2, Renderer::getScreenHeight() * 0.15f);
 }
 
-void GuiMenu::openScraperSettings()
+void GuiMenu::openScraperSettings()
 {
-	auto s = new GuiSettings(mWindow, "SCRAPER");
+	auto s = new GuiSettings(mWindow, "Sx05RE Settings");
 
-	// scrape from
-	auto scraper_list = std::make_shared< OptionListComponent< std::string > >(mWindow, "SCRAPE FROM", false);
-	std::vector<std::string> scrapers = getScraperList();
-	for(auto it = scrapers.cbegin(); it != scrapers.cend(); it++)
-		scraper_list->add(*it, *it, *it == Settings::getInstance()->getString("Scraper"));
-
-	s->addWithLabel("SCRAPE FROM", scraper_list);
-	s->addSaveFunc([scraper_list] { Settings::getInstance()->setString("Scraper", scraper_list->getSelected()); });
-
-	// scrape ratings
-	auto scrape_ratings = std::make_shared<SwitchComponent>(mWindow);
-	scrape_ratings->setState(Settings::getInstance()->getBool("ScrapeRatings"));
-	s->addWithLabel("SCRAPE RATINGS", scrape_ratings);
-	s->addSaveFunc([scrape_ratings] { Settings::getInstance()->setBool("ScrapeRatings", scrape_ratings->getState()); });
+	Window* window = mWindow;
 
-	// scrape now
 	ComponentListRow row;
-	auto openScrapeNow = [this] { mWindow->pushGui(new GuiScraperStart(mWindow)); };
-	std::function<void()> openAndSave = openScrapeNow;
-	openAndSave = [s, openAndSave] { s->save(); openAndSave(); };
-	row.makeAcceptInputHandler(openAndSave);
-
-	auto scrape_now = std::make_shared<TextComponent>(mWindow, "SCRAPE NOW", Font::get(FONT_SIZE_MEDIUM), 0x777777FF);
-	auto bracket = makeArrow(mWindow);
-	row.addElement(scrape_now, true);
-	row.addElement(bracket, false);
+	if (UIModeController::getInstance()->isUIModeFull())
+	{
+		row.makeAcceptInputHandler([window] {
+			window->pushGui(new GuiMsgBox(window, "REALLY SET KODI AT BOOT?", "YES",
+				[] { 
+				runSystemCommand("echo KODI > /storage/.config/def_ef");
+				}, "NO", nullptr));
+		});
+		row.addElement(std::make_shared<TextComponent>(window, "KODI AT BOOT", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+		s->addRow(row);
+
+    	row.elements.clear();
+			row.makeAcceptInputHandler([window] {
+				window->pushGui(new GuiMsgBox(window, "REALLY SET RETROARCH AT BOOT?", "YES",
+				[] { 
+				runSystemCommand("echo RA > /storage/.config/def_ef");
+				}, "NO", nullptr));
+			});
+			row.addElement(std::make_shared<TextComponent>(window, "RETROARCH AT BOOT", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+			s->addRow(row);
+		
+	}
+	row.elements.clear();
+	row.makeAcceptInputHandler([window] {
+		window->pushGui(new GuiMsgBox(window, "REALLY SET EMULATIONSTATION AT BOOT?", "YES",
+				[] { 
+				runSystemCommand("echo ES > /storage/.config/def_ef");
+				}, "NO", nullptr));
+	});
+	row.addElement(std::make_shared<TextComponent>(window, "EMULATIONSTATION AT BOOT", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+	s->addRow(row);
+
+	row.elements.clear();
+	row.makeAcceptInputHandler([window] {
+		window->pushGui(new GuiMsgBox(window, "WARNING!! RESET Sx05RE TO DEFAULT CONFIG AND RESTART?", "YES",
+				[] { 
+				runSystemCommand("/usr/bin/clearconfig.sh");
+				}, "NO", nullptr));
+	});
+	row.addElement(std::make_shared<TextComponent>(window, "RESET DEFAULT CONFIG", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
 	s->addRow(row);
 
 	mWindow->pushGui(s);
@@ -408,55 +425,67 @@
 	Window* window = mWindow;
 
 	ComponentListRow row;
-	if (UIModeController::getInstance()->isUIModeFull())
-	{
+
 		row.makeAcceptInputHandler([window] {
 			window->pushGui(new GuiMsgBox(window, "REALLY RESTART?", "YES",
 				[] {
-				if(quitES("/tmp/es-restart") != 0)
-					LOG(LogWarning) << "Restart terminated with non-zero result!";
+    		   runSystemCommand("systemctl restart emustation.service");
 			}, "NO", nullptr));
 		});
 		row.addElement(std::make_shared<TextComponent>(window, "RESTART EMULATIONSTATION", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
 		s->addRow(row);
 
+			row.elements.clear();
+			row.makeAcceptInputHandler([window] {
+				window->pushGui(new GuiMsgBox(window, "QUIT TO KODI? ", "YES",
+					[] {
+					remove("/var/lock/start.games");
+            		runSystemCommand("touch /var/lock/start.kodi");
+			        runSystemCommand("systemctl start kodi.service");
+					SDL_Event ev;
+					ev.type = SDL_QUIT;
+					SDL_PushEvent(&ev);
+				}, "NO", nullptr));
+			});
+			row.addElement(std::make_shared<TextComponent>(window, "KODI", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+			s->addRow(row);
 
-
-		if(Settings::getInstance()->getBool("ShowExit"))
-		{
 			row.elements.clear();
 			row.makeAcceptInputHandler([window] {
-				window->pushGui(new GuiMsgBox(window, "REALLY QUIT?", "YES",
+				window->pushGui(new GuiMsgBox(window, "QUIT TO RETROARCH? ", "YES",
 					[] {
+					remove("/var/lock/start.games");
+            		runSystemCommand("touch /var/lock/start.retro");
+			        runSystemCommand("systemctl start retroarch.service");
 					SDL_Event ev;
 					ev.type = SDL_QUIT;
 					SDL_PushEvent(&ev);
 				}, "NO", nullptr));
 			});
-			row.addElement(std::make_shared<TextComponent>(window, "QUIT EMULATIONSTATION", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+			row.addElement(std::make_shared<TextComponent>(window, "RETROARCH", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
 			s->addRow(row);
-		}
-	}
+
+	
 	row.elements.clear();
 	row.makeAcceptInputHandler([window] {
 		window->pushGui(new GuiMsgBox(window, "REALLY RESTART?", "YES",
 			[] {
-			if (quitES("/tmp/es-sysrestart") != 0)
+			if (system("systemctl reboot") != 0)
 				LOG(LogWarning) << "Restart terminated with non-zero result!";
 		}, "NO", nullptr));
 	});
-	row.addElement(std::make_shared<TextComponent>(window, "RESTART SYSTEM", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+	row.addElement(std::make_shared<TextComponent>(window, "RESTART Sx05RE", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
 	s->addRow(row);
 
 	row.elements.clear();
 	row.makeAcceptInputHandler([window] {
 		window->pushGui(new GuiMsgBox(window, "REALLY SHUTDOWN?", "YES",
 			[] {
-			if (quitES("/tmp/es-shutdown") != 0)
+			if (system("systemctl poweroff") != 0)
 				LOG(LogWarning) << "Shutdown terminated with non-zero result!";
 		}, "NO", nullptr));
 	});
-	row.addElement(std::make_shared<TextComponent>(window, "SHUTDOWN SYSTEM", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
+	row.addElement(std::make_shared<TextComponent>(window, "SHUTDOWN Sx05RE", Font::get(FONT_SIZE_MEDIUM), 0x777777FF), true);
 	s->addRow(row);
 
 	mWindow->pushGui(s);
@@ -468,7 +497,7 @@
 
 	mVersion.setFont(Font::get(FONT_SIZE_SMALL));
 	mVersion.setColor(0x5E5E5EFF);
-	mVersion.setText("EMULATIONSTATION V" + Utils::String::toUpper(PROGRAM_VERSION_STRING) + buildDate);
+	mVersion.setText("EMULATIONSTATION V" + Utils::String::toUpper(PROGRAM_VERSION_STRING) + buildDate +" SX05RE v1.8.4");
 	mVersion.setHorizontalAlignment(ALIGN_CENTER);
 	addChild(&mVersion);
 }
--- a/es-app/src/main.cpp	Thu Jun 08 07:58:22 2017
+++ b/es-app/src/main.cpp	Thu Jun 08 16:57:52 2017
@@ -267,6 +267,9 @@
 		window.pushGui(new GuiMsgBox(&window,
 			errorMsg,
 			"QUIT", [] {
+               remove("/var/lock/start.games");
+				runSystemCommand("touch /var/lock/start.kodi");
+				runSystemCommand("systemctl start kodi.service");
 				SDL_Event* quit = new SDL_Event();
 				quit->type = SDL_QUIT;
 				SDL_PushEvent(quit);
--- a/es-core/src/platform.cpp	Thu Jun 08 07:58:22 2017
+++ b/es-core/src/platform.cpp	Thu Jun 08 17:02:03 2017
@@ -43,20 +43,12 @@
 
 int runShutdownCommand()
 {
-#ifdef WIN32 // windows
-	return system("shutdown -s -t 0");
-#else // osx / linux
-	return system("sudo shutdown -h now");
-#endif
+return system("systemctl poweroff");
 }
 
 int runRestartCommand()
 {
-#ifdef WIN32 // windows
-	return system("shutdown -r -t 0");
-#else // osx / linux
-	return system("sudo shutdown -r now");
-#endif
+return system("systemctl reboot");
 }
 
 int runSystemCommand(const std::string& cmd_utf8)
